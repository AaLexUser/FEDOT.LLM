def code_generation_prompt(
    user_instruction: str, dataset_path: str, files: str, skeleton: str
) -> str:
    return f"""
You are a helpful intelligent assistant tasked with assisting in solving machine learning tasks. Follow the instructions provided in the user input and adhere strictly to the specified constraints.

# About the Dataset:
[Task]
{user_instruction}

[Path to Dataset]
{dataset_path}

[Files]
{files}

Your responsibility is to complete the Python script provided below. Ensure you start the Python code with "```python" and produce code that can be executed without requiring additional modifications.

[solution.py] 
```python
{skeleton}
```

**Key Rules and Constraints**:
1. You must **NOT DELETE ANY COMMENTS** in the code.
2. Do not modify the code enclosed between the designated markers (### comment ### code ### comment ###). This code is autogenerated and will be regenerated upon restarting the project.
3. You **cannot use any methods or attributes** from the Fedot framework classes (such as `Fedot`, `Pipeline`), except those **explicitly used in the provided code** or **described in the comments**.
4. You are required to write and modify only the code within the 'USER CODE' sections. All other sections will be regenerated during project restarts.
"""


def fix_solution_prompt(
    user_instruction: str,
    dataset_path: str,
    files: str,
    code_recent_solution: str,
    stdout: str,
    stderr: str,
) -> str:
    return f"""
You're a machine learning expert.
You are given a machine learning problem.
# About Dataset
[Task]
{user_instruction}
[Path to Dataset]
{dataset_path}
[Files]
{files}

A previous Python solution code was generated for the problem:
```python
{code_recent_solution}
```
Output:
<stdout>
{stdout}
</stdout>
Problem trace:
<stderr>
{stderr}
</stderr>

You need to generate a fixed solution code.
- **Concentrate on solving the problem that caused the error**, don't fix others 
- **Write the whole code**
Answer:
```python
"""


def generate_configuration_prompt(reflection: str, dataset_description: str) -> str:
    return f"""
temperature = 0.2
system = ""
user = '''
You're a machine learning expert.
You are given a machine learning problem.
<problem_reflection>
{reflection}
</problem_reflection>

<dataset-description>
{dataset_description}
</dataset-description>
Your goal is to define the optimal parameters for an automatic machine learning model fitting framework.
Make sure to fully address the problem goals, rules and constraints.
Use default values if not specified.
"""


def problem_reflection_prompt(description: str, dataset_description: str) -> str:
    return f"""
You're a machine learning expert.
You are given a machine learning problem.
<problem_description>
{description}
</problem_description>

<dataset-description>
{dataset_description}
</dataset-description>

Make sure to fully address the problem goals, rules and constraints.
Your goal is to define the optimal arguments for given function.
"""


def reporter_prompt(description: str, metrics: str, pipeline: str, code: str) -> str:
    return f"""
You are an expert in ML. You always write clearly and concisely.
You've created an ML model to solve the problem:
```
{description}
```
Send a messenger message with a report of your findings.
Characteristics of the resulting ML model:
Metrics: {metrics}
Pipeline: 
```
{pipeline}
```
Code:
```python
{code}
```
1. Be concise. 
2. Structure your text using bullet points where appropriate.
3. Use Markdown formatting.
4. Use tables.
5. Don't talk about empty values.
6. Style is Twitter post.
7. Do not suggest next steps.
"""
